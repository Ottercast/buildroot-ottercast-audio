From 6806cc54e56ccf6d631a06894a6039de3e972be3 Mon Sep 17 00:00:00 2001
From: Tobias Schramm <t.schramm@manjaro.org>
Date: Thu, 13 May 2021 16:20:35 +0200
Subject: [PATCH 17/20] drm/panel: add support for startek kd35wvfpd107 16-bit
 RGB panel

The startek kd35wvfpd107 is a 340x800 pixel 16-bit parallel RGB panel.
It features a ST7701S controller with SPI as control interface.

Signed-off-by: Tobias Schramm <t.schramm@manjaro.org>
---
 .../display/panel/startek,kd35wvfpd107.yaml   |  76 +++++
 drivers/gpu/drm/panel/Kconfig                 |  10 +
 drivers/gpu/drm/panel/Makefile                |   1 +
 .../drm/panel/panel-startek-kd35wvfpd107.c    | 280 ++++++++++++++++++
 4 files changed, 367 insertions(+)
 create mode 100644 Documentation/devicetree/bindings/display/panel/startek,kd35wvfpd107.yaml
 create mode 100644 drivers/gpu/drm/panel/panel-startek-kd35wvfpd107.c

diff --git a/Documentation/devicetree/bindings/display/panel/startek,kd35wvfpd107.yaml b/Documentation/devicetree/bindings/display/panel/startek,kd35wvfpd107.yaml
new file mode 100644
index 000000000000..5e8fdfb1c23f
--- /dev/null
+++ b/Documentation/devicetree/bindings/display/panel/startek,kd35wvfpd107.yaml
@@ -0,0 +1,76 @@
+# SPDX-License-Identifier: (GPL-2.0-only OR BSD-2-Clause)
+%YAML 1.2
+---
+$id: http://devicetree.org/schemas/display/panel/startek,kd35wvfpd107.yaml#
+$schema: http://devicetree.org/meta-schemas/core.yaml#
+
+title: kd35wvfpd107 16-bit parallel RGB panel
+
+maintainers:
+  - Tobias Schramm <t.schramm@manjaro.org>
+
+description: |
+  The kd35wvfpd107 is a 340x800 LCD panel with a 16-bit RGB interface.
+  It is based on the ST7701S controller, using 3-wire 9 bit SPI for
+  control.
+
+allOf:
+  - $ref: panel-common.yaml#
+
+properties:
+  compatible:
+    items:
+      - const: startek,kd35wvfpd107
+
+  reg:
+    description: DSI virtual channel used by that screen
+    maxItems: 1
+
+  VCC-supply:
+    description: analog regulator for MIPI circuit
+
+  IOVCC-supply:
+    description: I/O system regulator
+
+  reset-gpios: true
+
+  backlight: true
+
+required:
+  - compatible
+  - reg
+  - VCC-supply
+  - IOVCC-supply
+
+additionalProperties: false
+
+examples:
+  - |
+   #include <dt-bindings/gpio/gpio.h>
+
+    spi-lcd {
+        compatible = "spi-gpio";
+        #address-cells = <1>;
+        ranges;
+
+        cs-gpios = <&pio 1 6 GPIO_ACTIVE_HIGH>; /* PB6 */
+        mosi-gpios = <&pio 1 9 GPIO_ACTIVE_HIGH>; /* PB9 */
+        sck-gpios = <&pio 1 7 GPIO_ACTIVE_HIGH>; /* PB7 */
+        num-chipselects = <1>;
+
+        rgb-panel@0 {
+            reg = <0>;
+            compatible = "startek,kd35wvfpd107";
+            backlight = <&backlight>;
+            pinctrl-names = "default";
+            pinctrl-0 = <&panel_pins>;
+            VCCIO-supply = <&vcc_3v3>;
+            VCC-supply = <&vcc_3v3>;
+
+            port {
+                lcd_in: endpoint {
+                    remote-endpoint = <&tcon0_out_lcd>;
+                };
+            };
+        };
+    };
diff --git a/drivers/gpu/drm/panel/Kconfig b/drivers/gpu/drm/panel/Kconfig
index b9dbedf8f15e..31d7e959b473 100644
--- a/drivers/gpu/drm/panel/Kconfig
+++ b/drivers/gpu/drm/panel/Kconfig
@@ -450,6 +450,16 @@ config DRM_PANEL_SONY_ACX565AKM
 	  Say Y here if you want to enable support for the Sony ACX565AKM
 	  800x600 3.5" panel (found on the Nokia N900).
 
+config DRM_PANEL_STARTEK_KD35WVFPD107
+	tristate "Startek KD35WVFPD107 panel driver"
+	depends on OF
+	depends on BACKLIGHT_CLASS_DEVICE
+	depends on SPI
+	help
+	  Say Y here if you want to enable support for the Startek
+	  KD35WVFPD107 340x800 panel with parallel RGB data and SPI control
+	  interface.
+
 config DRM_PANEL_TPO_TD028TTEC1
 	tristate "Toppoly (TPO) TD028TTEC1 panel driver"
 	depends on OF && SPI
diff --git a/drivers/gpu/drm/panel/Makefile b/drivers/gpu/drm/panel/Makefile
index 2ba560bca61d..6611ffe2ee80 100644
--- a/drivers/gpu/drm/panel/Makefile
+++ b/drivers/gpu/drm/panel/Makefile
@@ -45,6 +45,7 @@ obj-$(CONFIG_DRM_PANEL_SHARP_LS043T1LE01) += panel-sharp-ls043t1le01.o
 obj-$(CONFIG_DRM_PANEL_SITRONIX_ST7701) += panel-sitronix-st7701.o
 obj-$(CONFIG_DRM_PANEL_SITRONIX_ST7703) += panel-sitronix-st7703.o
 obj-$(CONFIG_DRM_PANEL_SITRONIX_ST7789V) += panel-sitronix-st7789v.o
+obj-$(CONFIG_DRM_PANEL_STARTEK_KD35WVFPD107) += panel-startek-kd35wvfpd107.o
 obj-$(CONFIG_DRM_PANEL_SONY_ACX565AKM) += panel-sony-acx565akm.o
 obj-$(CONFIG_DRM_PANEL_SONY_TULIP_TRULY_NT35521) += panel-sony-tulip-truly-nt35521.o
 obj-$(CONFIG_DRM_PANEL_TDO_TL070WSH30) += panel-tdo-tl070wsh30.o
diff --git a/drivers/gpu/drm/panel/panel-startek-kd35wvfpd107.c b/drivers/gpu/drm/panel/panel-startek-kd35wvfpd107.c
new file mode 100644
index 000000000000..8420c674c62a
--- /dev/null
+++ b/drivers/gpu/drm/panel/panel-startek-kd35wvfpd107.c
@@ -0,0 +1,280 @@
+// SPDX-License-Identifier: GPL-2.0+
+/*
+ * Copyright (C) 2021, Tobias Schramm
+ * Author: Tobias Schramm <t.schramm@manjaro.org>
+ */
+
+#include <drm/drm_modes.h>
+#include <drm/drm_panel.h>
+
+#include <linux/gpio/consumer.h>
+#include <linux/delay.h>
+#include <linux/media-bus-format.h>
+#include <linux/module.h>
+#include <linux/of_device.h>
+#include <linux/regulator/consumer.h>
+#include <linux/spi/spi.h>
+
+static const char * const startek_supply_names[] = {
+	"VCC",
+	"IOVCC",
+};
+
+struct startek_panel {
+	struct drm_panel panel;
+	struct gpio_desc *reset;
+	struct spi_device *spi;
+	struct regulator_bulk_data supplies[2];
+};
+
+static const struct drm_display_mode startek_mode = {
+	.clock		= 25000,
+
+	.flags		= DRM_MODE_FLAG_NHSYNC | DRM_MODE_FLAG_NVSYNC,
+
+	.hdisplay	= 340,
+	.hsync_start	= 340 + 94,
+	.hsync_end	= 340 + 94 + 16,
+	.htotal		= 340 + 94 + 16 + 70,
+
+	.vdisplay	= 800,
+	.vsync_start	= 800 +  8,
+	.vsync_end	= 800 +  8 +  4,
+	.vtotal		= 800 +  8 +  4 +  7,
+
+	.width_mm	= 81,
+	.height_mm	= 34,
+
+	.type = DRM_MODE_TYPE_DRIVER | DRM_MODE_TYPE_PREFERRED,
+};
+
+static inline struct startek_panel *panel_to_startek(struct drm_panel *panel)
+{
+	return container_of(panel, struct startek_panel, panel);
+}
+
+#define STARTEK_SPI(startek, cmd)						\
+	{									\
+		const u16 tx[] = { cmd };					\
+		spi_write_then_read((startek)->spi, tx, sizeof(tx), NULL, 0);	\
+	}
+
+#define STARTEK_SPI_ARGS(startek, cmd, seq...)					\
+	{									\
+		unsigned i;							\
+		u16 tx[] = { cmd, seq };					\
+		for (i = 1; i < ARRAY_SIZE(tx); i++)				\
+			tx[i] |= BIT(8);					\
+		spi_write_then_read((startek)->spi, tx, sizeof(tx), NULL, 0);	\
+	}
+
+static void startek_init_sequence(struct startek_panel *startek)
+{
+	unsigned i;
+
+	/*
+	 * Perform 5 resets to ensure interface synchronization
+	 * Maximum number of arguments to any command is 4
+	 */
+	for (i = 0; i < 5; i++) {
+		STARTEK_SPI(startek, 0x01)
+		msleep(100);
+	}
+
+	/* Exit sleep mode */
+	STARTEK_SPI(startek, 0x11)
+	msleep(500);
+
+	STARTEK_SPI_ARGS(startek, 0xff, 0x77, 0x01, 0x00, 0x00, 0x10);
+	STARTEK_SPI_ARGS(startek, 0xc0, 0x63, 0x00);
+	STARTEK_SPI_ARGS(startek, 0xc1, 0x0d, 0x02);
+	STARTEK_SPI_ARGS(startek, 0xc2, 0x37, 0x02);
+	/* Enter HV mode, ignore data enable */
+	STARTEK_SPI_ARGS(startek, 0xc3, 0x80, 0x02, 0x02);
+	STARTEK_SPI_ARGS(startek, 0xcc, 0x10);
+	STARTEK_SPI_ARGS(startek, 0xB0, 0x02, 0x13, 0x1B, 0x0d, 0x10, 0x05, 0x08, 0x07, 0x07, 0x24, 0x04, 0x11, 0x0e, 0x2c, 0x33, 0x1d);
+	STARTEK_SPI_ARGS(startek, 0xB1, 0x05, 0x13, 0x1B, 0x0d, 0x11, 0x05, 0x08, 0x07, 0x07, 0x24, 0x04, 0x11, 0x0e, 0x2c, 0x33, 0x1d);
+	STARTEK_SPI_ARGS(startek, 0xff, 0x77, 0x01, 0x00, 0x00, 0x11);
+	STARTEK_SPI_ARGS(startek, 0xB0, 0xB5);
+	STARTEK_SPI_ARGS(startek, 0xB1, 0x80);
+	STARTEK_SPI_ARGS(startek, 0xB2, 0x05);
+	STARTEK_SPI_ARGS(startek, 0xB3, 0x80);
+	STARTEK_SPI_ARGS(startek, 0xB5, 0x4C);
+	STARTEK_SPI_ARGS(startek, 0xB7, 0x85);
+	STARTEK_SPI_ARGS(startek, 0xB8, 0x30);
+	STARTEK_SPI_ARGS(startek, 0xBB, 0x00);
+	STARTEK_SPI_ARGS(startek, 0xC1, 0x08);
+	STARTEK_SPI_ARGS(startek, 0xC2, 0x08);
+	STARTEK_SPI_ARGS(startek, 0xD0, 0x88);
+	STARTEK_SPI_ARGS(startek, 0xE0, 0x00, 0x00, 0x02);
+	STARTEK_SPI_ARGS(startek, 0xE1, 0x01, 0xA0, 0x03, 0xA0, 0x02, 0xA0, 0x04, 0xA0, 0x00, 0x44, 0x44);
+	STARTEK_SPI_ARGS(startek, 0xE2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00);
+	STARTEK_SPI_ARGS(startek, 0xE3, 0x00, 0x00, 0x33, 0x33);
+	STARTEK_SPI_ARGS(startek, 0xE4, 0x44, 0x44);
+	STARTEK_SPI_ARGS(startek, 0xE5, 0x01, 0x26, 0xA0, 0x80, 0x03, 0x28, 0xa0, 0x80, 0x05, 0x2a, 0xa0, 0x80, 0x07, 0x2c, 0xa0, 0x80);
+	STARTEK_SPI_ARGS(startek, 0xE6, 0x00, 0x00, 0x33, 0x33);
+	STARTEK_SPI_ARGS(startek, 0xE7, 0x44, 0x44);
+	STARTEK_SPI_ARGS(startek, 0xE8, 0x02, 0x26, 0xa0, 0x80, 0x04, 0x28, 0xa0, 0x80, 0x06, 0x2a, 0xa0, 0x80, 0x08, 0x2c, 0xa0, 0x80);
+	STARTEK_SPI_ARGS(startek, 0xEb, 0x00, 0x00, 0xe4, 0xe4, 0x44, 0x00, 0x40);
+	STARTEK_SPI_ARGS(startek, 0xEd, 0xff, 0xf0, 0x17, 0x65, 0x4a, 0xbf, 0xaf, 0xff, 0xff, 0xfa, 0xfb, 0xa4, 0x56, 0x71, 0x0f, 0xff);
+	STARTEK_SPI_ARGS(startek, 0xff, 0x77, 0x01, 0x00, 0x00, 0x00);
+	STARTEK_SPI_ARGS(startek, 0x36, 0x00);
+	STARTEK_SPI_ARGS(startek, 0x3a, 0x55);
+}
+
+static int startek_prepare(struct drm_panel *panel)
+{
+	struct startek_panel *startek = panel_to_startek(panel);
+	int ret;
+
+	gpiod_set_value(startek->reset, 0);
+
+	ret = regulator_bulk_enable(ARRAY_SIZE(startek_supply_names),
+				    startek->supplies);
+	if (ret < 0)
+		return ret;
+	msleep(100);
+
+	gpiod_set_value(startek->reset, 1);
+	msleep(200);
+
+	startek_init_sequence(startek);
+
+	return 0;
+}
+
+static int startek_enable(struct drm_panel *panel)
+{
+	struct startek_panel *startek = panel_to_startek(panel);
+	STARTEK_SPI(startek, 0x29);
+
+	return 0;
+}
+
+static int startek_disable(struct drm_panel *panel)
+{
+	struct startek_panel *startek = panel_to_startek(panel);
+	STARTEK_SPI(startek, 0x28);
+
+	return 0;
+}
+
+static int startek_unprepare(struct drm_panel *panel)
+{
+	struct startek_panel *startek = panel_to_startek(panel);
+
+	gpiod_set_value(startek->reset, 0);
+	regulator_bulk_disable(ARRAY_SIZE(startek_supply_names),
+			       startek->supplies);
+
+	return 0;
+}
+
+
+static int startek_get_modes(struct drm_panel *panel,
+			    struct drm_connector *connector)
+{
+	struct drm_display_mode *mode;
+	static const u32 bus_format = MEDIA_BUS_FMT_RGB565_1X16;
+
+	mode = drm_mode_duplicate(connector->dev, &startek_mode);
+	if (!mode)
+		return -ENOMEM;
+
+	drm_mode_set_name(mode);
+	drm_mode_probed_add(connector, mode);
+
+	connector->display_info.width_mm = mode->width_mm;
+	connector->display_info.height_mm = mode->height_mm;
+	connector->display_info.bpc = 6;
+	drm_display_info_set_bus_formats(&connector->display_info,
+					 &bus_format, 1);
+	connector->display_info.bus_flags = DRM_BUS_FLAG_DE_LOW |
+					    DRM_BUS_FLAG_PIXDATA_SAMPLE_POSEDGE;
+
+	return 1;
+}
+
+static const struct drm_panel_funcs startek_funcs = {
+	.disable	= startek_disable,
+	.unprepare	= startek_unprepare,
+	.prepare	= startek_prepare,
+	.enable		= startek_enable,
+	.get_modes	= startek_get_modes,
+};
+
+static int startek_spi_probe(struct spi_device *spi)
+{
+	struct device *dev = &spi->dev;
+	struct startek_panel *startek;
+	int ret, i;
+
+	spi->mode = SPI_MODE_2;
+	spi->bits_per_word = 9;
+	spi->max_speed_hz = 1000000;
+
+	startek = devm_kzalloc(dev, sizeof(*startek), GFP_KERNEL);
+	if (!startek)
+		return -ENOMEM;
+
+	startek->spi = spi;
+
+	for (i = 0; i < ARRAY_SIZE(startek_supply_names); i++)
+		startek->supplies[i].supply = startek_supply_names[i];
+
+	ret = devm_regulator_bulk_get(dev, ARRAY_SIZE(startek_supply_names),
+				      startek->supplies);
+	if (ret < 0)
+		return ret;
+
+	startek->reset = devm_gpiod_get(dev, "reset", GPIOD_OUT_LOW);
+	if (IS_ERR(startek->reset)) {
+		dev_err(dev, "Failed to get reset GPIO, continuing with "
+			     "software reset only\n");
+		startek->reset = NULL;
+	}
+
+	spi_set_drvdata(spi, startek);
+
+	drm_panel_init(&startek->panel, dev, &startek_funcs,
+		       DRM_MODE_CONNECTOR_DPI);
+
+	ret = drm_panel_of_backlight(&startek->panel);
+	if (ret)
+		return ret;
+
+	drm_panel_add(&startek->panel);
+
+	return 0;
+}
+
+static void startek_spi_remove(struct spi_device *spi)
+{
+	struct startek_panel *startek = spi_get_drvdata(spi);
+
+	drm_panel_remove(&startek->panel);
+	drm_panel_disable(&startek->panel);
+	drm_panel_unprepare(&startek->panel);
+
+	return;
+}
+
+static const struct of_device_id startek_of_match[] = {
+	{ .compatible = "startek,kd35wvfpd107" },
+	{ }
+};
+MODULE_DEVICE_TABLE(of, startek_of_match);
+
+static struct spi_driver startek_spi_driver = {
+	.driver = {
+		.name		= "panel-startek-kd35wvfpd107",
+		.of_match_table	= startek_of_match,
+	},
+	.probe	= startek_spi_probe,
+	.remove	= startek_spi_remove,
+};
+module_spi_driver(startek_spi_driver);
+
+MODULE_AUTHOR("Tobias Schramm <t.schramm@manjaro.org>");
+MODULE_DESCRIPTION("Startek KD35WVFPD107 panel driver");
+MODULE_LICENSE("GPL");
-- 
2.31.1

