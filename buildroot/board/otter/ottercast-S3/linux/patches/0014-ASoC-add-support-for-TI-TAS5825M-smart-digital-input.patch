From a668a6b46dad593181a8fbab38e1f0e75ef53c4e Mon Sep 17 00:00:00 2001
From: Tobias Schramm <t.schramm@manjaro.org>
Date: Thu, 13 May 2021 16:23:22 +0200
Subject: [PATCH 14/16] ASoC: add support for TI TAS5825M smart, digital input
 amplifier

The TAS5825M is a digital input amplifier chip with an I2C control
interface and a builtin DSP.
Access to the DSP registers of the TAS5825 is prvided through a
specialized sysfs interface, since dynamic reconfiguration of sets of
registers during runtime is required to be able to harness the full power
of the DSP.

Signed-off-by: Tobias Schramm <t.schramm@manjaro.org>
---
 .../devicetree/bindings/sound/tas5825m.yaml   |  79 ++
 sound/soc/codecs/Kconfig                      |   8 +
 sound/soc/codecs/Makefile                     |   2 +
 sound/soc/codecs/tas5825m.c                   | 988 ++++++++++++++++++
 sound/soc/codecs/tas5825m.h                   | 133 +++
 5 files changed, 1210 insertions(+)
 create mode 100644 Documentation/devicetree/bindings/sound/tas5825m.yaml
 create mode 100644 sound/soc/codecs/tas5825m.c
 create mode 100644 sound/soc/codecs/tas5825m.h

diff --git a/Documentation/devicetree/bindings/sound/tas5825m.yaml b/Documentation/devicetree/bindings/sound/tas5825m.yaml
new file mode 100644
index 000000000000..b094531b94e9
--- /dev/null
+++ b/Documentation/devicetree/bindings/sound/tas5825m.yaml
@@ -0,0 +1,79 @@
+# SPDX-License-Identifier: (GPL-2.0-only OR BSD-2-Clause)
+# Copyright (C) 2021 Tobias Schramm <t.schramm@manjaro.org>
+%YAML 1.2
+---
+$id: "http://devicetree.org/schemas/sound/tas5825m.yaml#"
+$schema: "http://devicetree.org/meta-schemas/core.yaml#"
+
+title: Texas Instruments TAS5825M Digital Input Smart Stereo Amplifier
+
+maintainers:
+  - Tobias Schramm <t.schramm@manjaro.org>
+
+description: |
+  The TAS5825M is a stereo, digital imput Class-D audio amplifier with
+  advanced DSP capabilities. It is optimized to efficiently drive large
+  loudsepakers.
+
+properties:
+  compatible:
+    enum:
+      - ti,tas5825
+
+  reg:
+    maxItems: 1
+    description: |
+       I2C address of the device can be between 0x4c to 0x4f.
+
+  dvdd-supply:
+    description:
+      regulator phandle for the 3.3V VDD digital supply
+
+  pvdd-supply:
+    description:
+      regulator phandle for the main VDD amplifier power supply
+
+  shutdown-gpios:
+    description: GPIO used to control the state of the device.
+
+  tas5825m,gpio0-func:
+    description: output function of gpio0 on the TAS5825M
+    enum:
+      - gpio
+      - auto-mute
+      - auto-mute-left
+      - auto-mute-right
+      - clock-invalid
+      - warn
+      - sdout
+      - fault
+      - spi-clk
+      - spi-mosi
+
+  '#sound-dai-cells':
+    const: 0
+
+required:
+  - compatible
+  - dvdd-supply
+  - pvdd-supply
+  - reg
+
+additionalProperties: false
+
+examples:
+  - |
+   i2c0 {
+     #address-cells = <1>;
+     #size-cells = <0>;
+     codec: codec@4c {
+       compatible = "ti,tas5825m";
+       reg = <0x4c>;
+       #sound-dai-cells = <0>;
+       dvdd-supply = <&vcc_3v3>;
+       pvdd-supply = <&vbus>;
+       shutdown-gpios = <&pio 4 5 GPIO_ACTIVE_HIGH>;
+     };
+   };
+
+...
diff --git a/sound/soc/codecs/Kconfig b/sound/soc/codecs/Kconfig
index 34c6dd04b85a..68d0f71797e9 100644
--- a/sound/soc/codecs/Kconfig
+++ b/sound/soc/codecs/Kconfig
@@ -200,6 +200,7 @@ config SND_SOC_ALL_CODECS
 	imply SND_SOC_TAS5086
 	imply SND_SOC_TAS571X
 	imply SND_SOC_TAS5720
+	imply SND_SOC_TAS5825M
 	imply SND_SOC_TAS6424
 	imply SND_SOC_TDA7419
 	imply SND_SOC_TFA9879
@@ -1330,6 +1331,13 @@ config SND_SOC_TAS5720
 	  Enable support for Texas Instruments TAS5720L/M high-efficiency mono
 	  Class-D audio power amplifiers.
 
+config SND_SOC_TAS5825M
+	tristate "Texas Instruments TAS5825 Digital Input Smart Stereo Audio amplifier"
+	depends on I2C
+	help
+	  Enable support for Texas Instruments digital input Class-D Smart
+	  Audio Amplifier
+
 config SND_SOC_TAS6424
 	tristate "Texas Instruments TAS6424 Quad-Channel Audio amplifier"
 	depends on I2C
diff --git a/sound/soc/codecs/Makefile b/sound/soc/codecs/Makefile
index 11ce98c25d6c..70e47d4d2d25 100644
--- a/sound/soc/codecs/Makefile
+++ b/sound/soc/codecs/Makefile
@@ -212,6 +212,7 @@ snd-soc-sti-sas-objs := sti-sas.o
 snd-soc-tas5086-objs := tas5086.o
 snd-soc-tas571x-objs := tas571x.o
 snd-soc-tas5720-objs := tas5720.o
+snd-soc-tas5825m-objs := tas5825m.o
 snd-soc-tas6424-objs := tas6424.o
 snd-soc-tda7419-objs := tda7419.o
 snd-soc-tas2770-objs := tas2770.o
@@ -522,6 +523,7 @@ obj-$(CONFIG_SND_SOC_TAS2764)	+= snd-soc-tas2764.o
 obj-$(CONFIG_SND_SOC_TAS5086)	+= snd-soc-tas5086.o
 obj-$(CONFIG_SND_SOC_TAS571X)	+= snd-soc-tas571x.o
 obj-$(CONFIG_SND_SOC_TAS5720)	+= snd-soc-tas5720.o
+obj-$(CONFIG_SND_SOC_TAS5825M)	+= snd-soc-tas5825m.o
 obj-$(CONFIG_SND_SOC_TAS6424)	+= snd-soc-tas6424.o
 obj-$(CONFIG_SND_SOC_TDA7419)	+= snd-soc-tda7419.o
 obj-$(CONFIG_SND_SOC_TAS2770) += snd-soc-tas2770.o
diff --git a/sound/soc/codecs/tas5825m.c b/sound/soc/codecs/tas5825m.c
new file mode 100644
index 000000000000..0e702635b10e
--- /dev/null
+++ b/sound/soc/codecs/tas5825m.c
@@ -0,0 +1,988 @@
+// SPDX-License-Identifier: GPL-2.0+
+/*
+ * tas5825.c - ALSA SoC Texas Instruments TAS5825M digital input, smart
+ *             stereo audio amplifier
+ *
+ * Copyright (C)2021 Tobias Schramm <t.schramm@manjaro.org>
+ */
+
+#include <linux/module.h>
+#include <linux/errno.h>
+#include <linux/device.h>
+#include <linux/gpio/consumer.h>
+#include <linux/i2c.h>
+#include <linux/pm_runtime.h>
+#include <linux/regmap.h>
+#include <linux/slab.h>
+#include <linux/regulator/consumer.h>
+#include <linux/delay.h>
+
+#include <sound/pcm.h>
+#include <sound/pcm_params.h>
+#include <sound/soc.h>
+#include <sound/soc-dapm.h>
+#include <sound/tlv.h>
+
+#include "tas5825m.h"
+
+/* Define how often to check (and clear) the fault status register (in ms) */
+#define TAS5825M_FAULT_CHECK_INTERVAL 200
+
+static const char * const tas5825m_supply_names[] = {
+	"dvdd",		/* Digital power supply. Connect to 3.3-V supply. */
+	"pvdd",		/* Class-D amp and analog power supply (connected). */
+};
+
+#define TAS5825M_NUM_SUPPLIES	ARRAY_SIZE(tas5825m_supply_names)
+
+struct tas5825m_data {
+	struct snd_soc_component *component;
+	struct regmap *regmap;
+	struct i2c_client *i2c_client;
+	struct regulator_bulk_data supplies[TAS5825M_NUM_SUPPLIES];
+	struct delayed_work fault_check_work;
+	struct gpio_desc *shutdown_gpio;
+	unsigned int last_chan_fault;
+	unsigned int last_global_fault1;
+	unsigned int last_global_fault2;
+	u8 register_book;
+	u8 register_page;
+};
+
+static int tas5825m_hw_params(struct snd_pcm_substream *substream,
+			     struct snd_pcm_hw_params *params,
+			     struct snd_soc_dai *dai)
+{
+	struct snd_soc_component *component = dai->component;
+	unsigned int rate = params_rate(params);
+	unsigned int format = params_format(params);
+	unsigned int fsmode;
+	unsigned int word_length;
+	int ret;
+
+	switch (rate) {
+	case 32000:
+	case 48000:
+	case 96000:
+	case 192000:
+		fsmode = 0;
+		break;
+	case 44100:
+		fsmode = 0b1000;
+		break;
+	case 88200:
+		fsmode = 0b1010;
+		break;
+	case 176400:
+		fsmode = 0b1100;
+		break;
+	default:
+		dev_err(component->dev, "unsupported sample rate: %u\n", rate);
+		return -EINVAL;
+	}
+
+	switch (format) {
+	case SNDRV_PCM_FORMAT_S16_LE:
+		word_length = 0b00;
+		break;
+	case SNDRV_PCM_FORMAT_S20_3LE:
+		word_length = 0b01;
+		break;
+	case SNDRV_PCM_FORMAT_S24_LE:
+		word_length = 0b10;
+		break;
+	case SNDRV_PCM_FORMAT_S32_LE:
+		word_length = 0b11;
+		break;		
+	default:
+		dev_err(component->dev, "unsupported format: %u\n", rate);
+		return -EINVAL;
+	}
+
+/*
+	Datasheets suggest setting fsmode for certain sample rates, but doing so 
+	seems to break those sample rates completely. Contrary to information
+	provided in the datasheet autodetection seems to work fine for those
+	rates.
+	ret = snd_soc_component_update_bits(component, TAS5825M_SIG_CH_CTRL,
+				  TAS5825M_FSMODE_MASK, fsmode);
+	if (ret < 0) {
+		dev_err(component->dev, "error setting sample rate: %d\n", ret);
+		return ret;
+	}
+*/
+
+	ret = snd_soc_component_update_bits(component, TAS5825M_SAP_CTRL1,
+				  TAS5825M_WORD_LENGTH_MASK, fsmode);
+	if (ret < 0) {
+		dev_err(component->dev, "error setting word length: %d\n", ret);
+		return ret;
+	}
+
+	return 0;
+}
+
+static int tas5825m_set_dai_fmt(struct snd_soc_dai *dai, unsigned int fmt)
+{
+	struct snd_soc_component *component = dai->component;
+	u8 data_format;
+	u8 sclk_inv;
+	int ret;
+
+	switch (fmt & SND_SOC_DAIFMT_FORMAT_MASK) {
+	case SND_SOC_DAIFMT_I2S:
+	case SND_SOC_DAIFMT_DSP_A:
+		data_format = TAS5825M_DATA_FORMAT_I2S;
+		break;
+	case SND_SOC_DAIFMT_DSP_B:
+	case SND_SOC_DAIFMT_LEFT_J:
+		data_format = TAS5825M_DATA_FORMAT_LTJ;
+		break;
+	case SND_SOC_DAIFMT_RIGHT_J:
+		data_format = TAS5825M_DATA_FORMAT_RTJ;
+		break;
+	default:
+		dev_vdbg(component->dev, "unsupported data format\n");
+		return -EINVAL;
+	}
+
+	switch (fmt & SND_SOC_DAIFMT_INV_MASK) {
+	case SND_SOC_DAIFMT_NB_NF:
+		sclk_inv = 0;
+		break;
+	case SND_SOC_DAIFMT_IB_NF:
+		sclk_inv = TAS5825M_SCLK_INV;
+		break;
+	default:
+		dev_vdbg(component->dev, "unsupported inversion mode\n");
+		return -EINVAL;
+
+	}
+
+	ret = snd_soc_component_update_bits(component, TAS5825M_DEVICE_CTRL1,
+				  TAS5825M_DATA_FORMAT_MASK,
+				  data_format);
+	if (ret < 0) {
+		dev_err(component->dev, "error setting data format: %d\n", ret);
+		return ret;
+	}
+
+	ret = snd_soc_component_update_bits(component, TAS5825M_I2S_CTRL,
+				  TAS5825M_SCLK_INV,
+				  sclk_inv);
+	if (ret < 0) {
+		dev_err(component->dev, "failed to set sclk inversion: %d\n", ret);
+		return ret;
+	}
+
+	return 0;
+}
+
+static int tas5825m_mute(struct snd_soc_dai *dai, int mute, int direction)
+{
+	struct snd_soc_component *component = dai->component;
+	int ret;
+
+	ret = snd_soc_component_update_bits(component, TAS5825M_DEVICE_CTRL2,
+				  TAS5825M_MUTE, mute ? TAS5825M_MUTE : 0);
+	if (ret < 0) {
+		dev_err(component->dev, "error (un-)muting device: %d\n", ret);
+		return ret;
+	}
+
+	return 0;
+}
+
+static void tas5825m_fault_check_work(struct work_struct *work)
+{
+	struct tas5825m_data *tas5825m = container_of(work, struct tas5825m_data,
+			fault_check_work.work);
+	struct device *dev = tas5825m->component->dev;
+	unsigned int curr_fault;
+	int ret;
+	bool recover = false;
+	bool fault_occured = false;
+
+	/* Handle channel fault register */
+	ret = regmap_read(tas5825m->regmap, TAS5825M_CHAN_FAULT, &curr_fault);
+	if (ret < 0) {
+		dev_err(dev, "failed to read CHAN_FAULT register: %d\n", ret);
+		goto out;
+	}
+
+	curr_fault &= TAS5825_CH2_OC_I | TAS5825_CH1_OC_I | TAS5825_CH2_DC_1 | TAS5825_CH1_DC_1;
+
+	if (curr_fault) {
+		fault_occured = true;
+		recover = true;
+	}
+
+	if ((curr_fault & TAS5825_CH2_OC_I) &&
+	    !(tas5825m->last_chan_fault & TAS5825_CH2_OC_I))
+		dev_crit(dev, "experienced channel 2 over-current fault");
+
+	if ((curr_fault & TAS5825_CH1_OC_I) &&
+	    !(tas5825m->last_chan_fault & TAS5825_CH1_OC_I))
+		dev_crit(dev, "experienced channel 1 over-current fault");
+
+	if ((curr_fault & TAS5825_CH2_DC_1) &&
+	    !(tas5825m->last_chan_fault & TAS5825_CH2_DC_1))
+		dev_crit(dev, "experienced channel 2 DC fault");
+
+	if ((curr_fault & TAS5825_CH1_DC_1) &&
+	    !(tas5825m->last_chan_fault & TAS5825_CH1_DC_1))
+		dev_crit(dev, "experienced channel 1 DC fault");
+
+	tas5825m->last_chan_fault = curr_fault;
+
+	/* Handle global fault register 1 */	
+	ret = regmap_read(tas5825m->regmap, TAS5825M_GLOBAL_FAULT1, &curr_fault);
+	if (ret < 0) {
+		dev_err(dev, "failed to read GLOBAL_FAULT1 register: %d\n", ret);
+		goto out;
+	}
+
+	curr_fault &= TAS5825M_CLK_FAULT_I | TAS5825M_PVDD_OV_I | TAS5825M_PVDD_UV_I;
+
+	if (curr_fault) {
+		fault_occured = true;
+	}
+
+	if ((curr_fault & TAS5825M_PVDD_OV_I) &&
+	    !(curr_fault & TAS5825M_PVDD_OV_I))
+		dev_crit(dev, "experienced PVDD overvoltage fault");
+
+	if ((curr_fault & TAS5825M_PVDD_UV_I) &&
+	    !(curr_fault & TAS5825M_PVDD_UV_I))
+		dev_crit(dev, "experienced PVDD undervoltage fault");
+
+	tas5825m->last_global_fault1 = curr_fault;
+
+	/* Handle global fault register 2 */	
+	ret = regmap_read(tas5825m->regmap, TAS5825M_GLOBAL_FAULT2, &curr_fault);
+	if (ret < 0) {
+		dev_err(dev, "failed to read GLOBAL_FAULT2 register: %d\n", ret);
+		goto out;
+	}
+
+	curr_fault &= TAS5825M_CBC_FAULT_CH2_I | TAS5825M_CBC_FAULT_CH1_I | TAS5825M_OTSD_I;
+
+	if ((curr_fault & TAS5825M_CBC_FAULT_CH2_I) &&
+	    !(tas5825m->last_chan_fault & TAS5825M_CBC_FAULT_CH2_I))
+		dev_crit(dev, "experienced channel 2 cycle by cycle overcurrent fault");
+
+	if ((curr_fault & TAS5825M_CBC_FAULT_CH1_I) &&
+	    !(tas5825m->last_chan_fault & TAS5825M_CBC_FAULT_CH1_I))
+		dev_crit(dev, "experienced channel 1 cycle by cycle overcurrent fault");
+
+	if ((curr_fault & TAS5825M_OTSD_I) &&
+	    !(tas5825m->last_chan_fault & TAS5825M_OTSD_I))
+		dev_crit(dev, "experienced over-temperature fault");
+
+	tas5825m->last_global_fault2 = curr_fault;
+
+	if (fault_occured) {
+		ret = regmap_write_bits(tas5825m->regmap, TAS5825M_FAULT_CLEAR,
+					TAS5825M_ANALOG_FAULT_CLEAR, TAS5825M_ANALOG_FAULT_CLEAR);
+		if (ret < 0)
+			dev_err(dev, "failed to write FAULT_CLEAR register: %d\n", ret);
+	}
+
+	if (recover) {
+		/*
+		 * Periodically toggle SDZ (shutdown bit) H->L->H to clear any latching
+		 * faults as long as a fault condition persists. Always going through
+		 * the full sequence no matter the first return value to minimizes
+		 * chances for the device to end up in shutdown mode.
+		 */
+		ret = regmap_write_bits(tas5825m->regmap, TAS5825M_DEVICE_CTRL2,
+					TAS5825M_CTRL_STATE_MASK, TAS5825M_CTRL_STATE_DEEP_SLEEP);
+		if (ret < 0)
+			dev_err(dev, "failed to write DEVICE_CTRL2 register: %d\n", ret);
+
+		ret = regmap_write_bits(tas5825m->regmap, TAS5825M_DEVICE_CTRL2,
+					TAS5825M_CTRL_STATE_MASK, TAS5825M_CTRL_STATE_PLAY);
+		if (ret < 0)
+			dev_err(dev, "failed to write DEVICE_CTRL2 register: %d\n", ret);
+	}
+
+out:
+	/* Schedule the next fault check at the specified interval */
+	schedule_delayed_work(&tas5825m->fault_check_work,
+			      msecs_to_jiffies(TAS5825M_FAULT_CHECK_INTERVAL));
+}
+
+static int tas5825m_codec_probe(struct snd_soc_component *component)
+{
+	struct tas5825m_data *tas5825m = snd_soc_component_get_drvdata(component);
+	unsigned int device_id;
+	int ret;
+
+	tas5825m->component = component;
+
+	ret = regulator_bulk_enable(ARRAY_SIZE(tas5825m->supplies),
+				    tas5825m->supplies);
+	if (ret != 0) {
+		dev_err(component->dev, "failed to enable supplies: %d\n", ret);
+		return ret;
+	}
+
+	/* Warn if chip identification is not what we expect */
+	ret = regmap_read(tas5825m->regmap, TAS5825M_DIE_ID, &device_id);
+	if (ret < 0) {
+		dev_err(component->dev, "failed to read device ID register: %d\n",
+			ret);
+		goto probe_fail;
+	}
+
+	if (device_id != TAS5825M_DIE_ID_ID)
+		dev_warn(component->dev, "wrong device ID. expected: %u read: %u\n",
+			 TAS5825M_DIE_ID_ID, device_id);
+
+	/* Set device to mute */
+	ret = snd_soc_component_update_bits(component, TAS5825M_DEVICE_CTRL2,
+				  TAS5825M_MUTE, TAS5825M_MUTE);
+	if (ret < 0)
+		goto error_snd_soc_component_update_bits;
+
+	/* Disable output data DSP processing */
+	ret = snd_soc_component_update_bits(component, TAS5825M_SDOUT_SEL,
+				  TAS5825M_SDOUT_SEL_PREPROCESSING,
+				  TAS5825M_SDOUT_SEL_PREPROCESSING);
+	if (ret < 0)
+		goto error_snd_soc_component_update_bits;
+
+	/* Set a low default volume */
+	ret = snd_soc_component_update_bits(component, TAS5825M_DIG_VOL,
+				  0xff,
+				  0xa0);
+	if (ret < 0)
+		goto error_snd_soc_component_update_bits;
+
+	/* Enter shutdown mode by default to minimize power consumption  */
+	ret = snd_soc_component_update_bits(component, TAS5825M_DEVICE_CTRL2,
+				  TAS5825M_CTRL_STATE_MASK,
+				  TAS5825M_CTRL_STATE_DEEP_SLEEP);
+	if (ret < 0)
+		goto error_snd_soc_component_update_bits;
+
+	INIT_DELAYED_WORK(&tas5825m->fault_check_work, tas5825m_fault_check_work);
+
+	return 0;
+
+error_snd_soc_component_update_bits:
+	dev_err(component->dev, "error configuring device registers: %d\n", ret);
+
+probe_fail:
+	regulator_bulk_disable(ARRAY_SIZE(tas5825m->supplies),
+			       tas5825m->supplies);
+	return ret;
+}
+
+static void tas5825m_codec_remove(struct snd_soc_component *component)
+{
+	struct tas5825m_data *tas5825m = snd_soc_component_get_drvdata(component);
+	int ret;
+
+	cancel_delayed_work_sync(&tas5825m->fault_check_work);
+
+	ret = regulator_bulk_disable(ARRAY_SIZE(tas5825m->supplies),
+				     tas5825m->supplies);
+	if (ret < 0)
+		dev_err(component->dev, "failed to disable supplies: %d\n", ret);
+};
+
+static int tas5825m_dac_event(struct snd_soc_dapm_widget *w,
+			     struct snd_kcontrol *kcontrol, int event)
+{
+	struct snd_soc_component *component = snd_soc_dapm_to_component(w->dapm);
+	struct tas5825m_data *tas5825m = snd_soc_component_get_drvdata(component);
+	int ret;
+
+	if (event & SND_SOC_DAPM_POST_PMU) {
+		/* Take TAS5825M out of shutdown mode */
+		if (tas5825m->shutdown_gpio) {
+			gpiod_set_value(tas5825m->shutdown_gpio, 1);
+			msleep(10);
+		}
+
+		ret = snd_soc_component_update_bits(component, TAS5825M_DEVICE_CTRL2,
+					  TAS5825M_CTRL_STATE_MASK, TAS5825M_CTRL_STATE_HIZ);
+		if (ret < 0) {
+			dev_err(component->dev, "error waking component: %d\n", ret);
+			return ret;
+		}
+
+		/* Allow clocks to stabilize */
+		msleep(80);
+
+		/* Enable DSP */
+		ret = snd_soc_component_update_bits(component, TAS5825M_DEVICE_CTRL2,
+					  TAS5825M_DIS_DSP,
+					  0);
+		if (ret < 0) {
+			dev_err(component->dev, "error waking DSP: %d\n", ret);
+			return ret;
+		}
+
+		/* Wait for DSP init */
+		msleep(10);
+
+		/* Take TAS5825M out of shutdown mode */
+		ret = snd_soc_component_update_bits(component, TAS5825M_DEVICE_CTRL2,
+					  TAS5825M_CTRL_STATE_MASK, TAS5825M_CTRL_STATE_PLAY);
+		if (ret < 0) {
+			dev_err(component->dev, "error starting to play: %d\n", ret);
+			return ret;
+		}
+
+		/* Turn on periodic fault checks */
+		tas5825m->last_chan_fault = 0;
+		tas5825m->last_global_fault1 = 0;
+		tas5825m->last_global_fault2 = 0;
+		schedule_delayed_work(&tas5825m->fault_check_work,
+				msecs_to_jiffies(TAS5825M_FAULT_CHECK_INTERVAL));
+	} else if (event & SND_SOC_DAPM_PRE_PMD) {
+		/* Disable TAS5825M periodic fault checking/handling */
+		cancel_delayed_work_sync(&tas5825m->fault_check_work);
+
+		/* Disable DSP */
+		ret = snd_soc_component_update_bits(component, TAS5825M_DEVICE_CTRL2,
+					  TAS5825M_DIS_DSP,
+					  TAS5825M_DIS_DSP);
+		if (ret < 0) {
+			dev_err(component->dev, "error disabling DSP: %d\n", ret);
+			return ret;
+		}
+
+		msleep(10);
+
+		/* Place TAS5825M in shutdown mode to minimize current draw */
+		ret = snd_soc_component_update_bits(component, TAS5825M_DEVICE_CTRL2,
+					  TAS5825M_CTRL_STATE_MASK, TAS5825M_CTRL_STATE_DEEP_SLEEP);
+		if (ret < 0) {
+			dev_err(component->dev, "error shutting down component: %d\n",
+				ret);
+			return ret;
+		}
+
+		if (tas5825m->shutdown_gpio) {
+			gpiod_set_value(tas5825m->shutdown_gpio, 0);
+			msleep(10);
+		}
+	}
+
+	return 0;
+}
+
+#ifdef CONFIG_PM
+static int tas5825m_suspend(struct snd_soc_component *component)
+{
+	struct tas5825m_data *tas5825m = snd_soc_component_get_drvdata(component);
+	int ret;
+
+	regcache_cache_only(tas5825m->regmap, true);
+	regcache_mark_dirty(tas5825m->regmap);
+
+	if (tas5825m->shutdown_gpio)
+		gpiod_set_value(tas5825m->shutdown_gpio, 1);
+
+	ret = regulator_bulk_disable(ARRAY_SIZE(tas5825m->supplies),
+				     tas5825m->supplies);
+	if (ret < 0)
+		dev_err(component->dev, "failed to disable supplies: %d\n", ret);
+
+	return ret;
+}
+
+static int tas5825m_resume(struct snd_soc_component *component)
+{
+	struct tas5825m_data *tas5825m = snd_soc_component_get_drvdata(component);
+	int ret;
+
+	ret = regulator_bulk_enable(ARRAY_SIZE(tas5825m->supplies),
+				    tas5825m->supplies);
+	if (ret < 0) {
+		dev_err(component->dev, "failed to enable supplies: %d\n", ret);
+		return ret;
+	}
+
+	if (tas5825m->shutdown_gpio)
+		gpiod_set_value(tas5825m->shutdown_gpio, 1);
+
+	regcache_cache_only(tas5825m->regmap, false);
+
+	ret = regcache_sync(tas5825m->regmap);
+	if (ret < 0) {
+		dev_err(component->dev, "failed to sync regcache: %d\n", ret);
+		return ret;
+	}
+
+	return 0;
+}
+#else
+#define tas5825m_suspend NULL
+#define tas5825m_resume NULL
+#endif
+
+static bool tas5825m_is_volatile_reg(struct device *dev, unsigned int reg)
+{
+	switch (reg) {
+	case TAS5825M_POWER_STATE:
+	case TAS5825M_AUTOMUTE_STATE:
+	case TAS5825M_CHAN_FAULT:
+	case TAS5825M_GLOBAL_FAULT1:
+	case TAS5825M_GLOBAL_FAULT2:
+	case TAS5825M_WARNING:
+		return true;
+	default:
+		return false;
+	}
+}
+
+static int i2c_read_reg(struct i2c_client *i2c, u8 reg, u8 *val) {
+	struct i2c_msg xfer[2];
+	int ret;
+
+	xfer[0].addr = i2c->addr;
+	xfer[0].flags = 0;
+	xfer[0].len = 1;
+	xfer[0].buf = (void *)&reg;
+
+	xfer[1].addr = i2c->addr;
+	xfer[1].flags = I2C_M_RD;
+	xfer[1].len = 1;
+	xfer[1].buf = val;
+
+	ret = i2c_transfer(i2c->adapter, xfer, 2);
+	if (ret == 2)
+		return 0;
+	else if (ret < 0)
+		return ret;
+	else
+		return -EIO;
+}
+
+static int i2c_write_reg(struct i2c_client *i2c, u8 reg, u8 val) {
+	struct i2c_msg xfer;
+	int ret;
+	u8 data[] = { reg, val };
+
+	xfer.addr = i2c->addr;
+	xfer.flags = 0;
+	xfer.len = sizeof(data);
+	xfer.buf = (void *)data;
+
+	ret = i2c_transfer(i2c->adapter, &xfer, 1);
+	if (ret == 1)
+		return 0;
+	else if (ret < 0)
+		return ret;
+	else
+		return -EIO;
+}
+
+static int tas_set_book_and_page(struct tas5825m_data *tas, u8 book, u8 page) {
+	int err;
+
+	if (tas->register_book == book && tas->register_page == page) {
+		return 0;
+	}
+
+	err = i2c_write_reg(tas->i2c_client, TAS5825M_PAGE, 0x00);
+	if (err) {
+		dev_err(&tas->i2c_client->dev,
+			"Failed to set page to 0x00: %d\n", err);
+		return err;
+	}
+	tas->register_page = 0;
+
+	err = i2c_write_reg(tas->i2c_client, TAS5825M_BOOK, book);
+	if (err) {
+		dev_err(&tas->i2c_client->dev,
+			"Failed to set book to 0x%02x: %d\n", book, err);
+		return err;
+	}
+	tas->register_book = book;
+
+	err = i2c_write_reg(tas->i2c_client, TAS5825M_PAGE, page);
+	if (err) {
+		dev_err(&tas->i2c_client->dev,
+			"Failed to set page to 0x%02x: %d\n", page, err);
+		return err;
+	}
+	tas->register_page = page;
+
+	return 0;
+}
+
+static int tas_read_reg(void *ctx, unsigned int reg, unsigned int *val) {
+	int err;
+	struct tas5825m_data *tas = ctx;
+	u8 book, page, val8;
+
+	book = (reg >> 16) & 0xff;
+	page = (reg >> 8) & 0xff;
+	err = tas_set_book_and_page(tas, book, page);
+	if (err) {
+		dev_err(&tas->i2c_client->dev,
+			"Failed to set book/page: %d\n", err);
+		return err;
+	}
+
+	err = i2c_read_reg(tas->i2c_client, reg & 0xff, &val8);
+	if (!err) {
+		*val = val8;
+	}
+	return err;
+}
+
+static int tas_write_reg(void *ctx, unsigned int reg, unsigned int val) {
+	int err;
+	struct tas5825m_data *tas = ctx;
+	u8 book, page;
+
+	book = (reg >> 16) & 0xff;
+	page = (reg >> 8) & 0xff;
+	err = tas_set_book_and_page(tas, book, page);
+	if (err) {
+		dev_err(&tas->i2c_client->dev,
+			"Failed to set book/page: %d\n", err);
+		return err;
+	}
+
+	return i2c_write_reg(tas->i2c_client, reg & 0xff, val & 0xff);
+}
+
+static const struct regmap_config tas5825m_regmap_config = {
+	/*
+	 * register address:
+	 *    book      page     reg
+	 * [23 ... 16|15 ... 8|7 ... 0]
+	 */
+	.reg_bits = 24,
+	.val_bits = 8,
+
+	.reg_read = tas_read_reg,
+	.reg_write = tas_write_reg,
+
+	.max_register = TAS5825M_MAX_REG,
+	.cache_type = REGCACHE_RBTREE,
+	.volatile_reg = tas5825m_is_volatile_reg,
+};
+
+static const char *const left_dac_txt[] =
+	{ "Mute", "Left channel", "Right channel" };
+
+static const struct soc_enum left_dac_src =
+	SOC_ENUM_SINGLE(TAS5825M_SAP_CTRL3, 4, ARRAY_SIZE(left_dac_txt),
+			left_dac_txt);
+
+static const char *const right_dac_txt[] =
+	{ "Mute", "Right channel", "Left channel" };
+
+static const struct soc_enum right_dac_src =
+	SOC_ENUM_SINGLE(TAS5825M_SAP_CTRL3, 0, ARRAY_SIZE(right_dac_txt),
+			right_dac_txt);
+
+static const SNDRV_CTL_TLVD_DECLARE_DB_LINEAR(pga_gain_tlv,
+					SNDRV_CTL_TLVD_DB_SCALE_MUTE, 2400);
+
+static const SNDRV_CTL_TLVD_DECLARE_DB_LINEAR(again_tlv, -1550, 0);
+
+static const struct snd_kcontrol_new tas5825m_snd_controls[] = {
+	SOC_SINGLE_TLV("Speaker Driver Playback Volume",
+		       TAS5825M_DIG_VOL, 0, 0xff, 1, pga_gain_tlv),
+	SOC_SINGLE_TLV("Speaker Driver Analog Gain", TAS5825M_AGAIN,
+		       0, 0x1f, 1, again_tlv),
+	SOC_ENUM("Left DAC source", left_dac_src),
+	SOC_ENUM("Right DAC source", right_dac_src),
+};
+
+static const struct snd_soc_dapm_widget tas5825m_dapm_widgets[] = {
+	SND_SOC_DAPM_AIF_IN("DAC IN", "Playback", 0, SND_SOC_NOPM, 0, 0),
+	SND_SOC_DAPM_DAC_E("DAC", NULL, SND_SOC_NOPM, 0, 0, tas5825m_dac_event,
+			   SND_SOC_DAPM_POST_PMU | SND_SOC_DAPM_PRE_PMD),
+	SND_SOC_DAPM_OUTPUT("OUTA"),
+	SND_SOC_DAPM_OUTPUT("OUTB"),
+};
+
+static const struct snd_soc_dapm_route tas5825m_audio_map[] = {
+	{ "DAC", NULL, "DAC IN" },
+	{ "OUTA", NULL, "DAC" },
+	{ "OUTB", NULL, "DAC" },
+};
+
+static const struct snd_soc_component_driver soc_component_dev_tas5825m = {
+	.probe			= tas5825m_codec_probe,
+	.remove			= tas5825m_codec_remove,
+	.suspend		= tas5825m_suspend,
+	.resume			= tas5825m_resume,
+	.controls		= tas5825m_snd_controls,
+	.num_controls		= ARRAY_SIZE(tas5825m_snd_controls),
+	.dapm_widgets		= tas5825m_dapm_widgets,
+	.num_dapm_widgets	= ARRAY_SIZE(tas5825m_dapm_widgets),
+	.dapm_routes		= tas5825m_audio_map,
+	.num_dapm_routes	= ARRAY_SIZE(tas5825m_audio_map),
+	.idle_bias_on		= 1,
+	.use_pmdown_time	= 1,
+	.endianness		= 1,
+	.non_legacy_dai_naming	= 1,
+};
+
+/* PCM rates supported by the TAS5825M */
+#define TAS5825M_RATES	(SNDRV_PCM_RATE_32000 | SNDRV_PCM_RATE_44100 |\
+			 SNDRV_PCM_RATE_48000 | SNDRV_PCM_RATE_88200 |\
+			 SNDRV_PCM_RATE_96000 | SNDRV_PCM_RATE_176400 |\
+			 SNDRV_PCM_RATE_192000)
+
+/* Formats supported by thr TAS5825M */
+#define TAS5825M_FORMATS (SNDRV_PCM_FMTBIT_S16_LE | SNDRV_PCM_FMTBIT_S20_3LE |\
+			  SNDRV_PCM_FMTBIT_S24_LE | SNDRV_PCM_FMTBIT_S32_LE)
+
+static const struct snd_soc_dai_ops tas5825m_speaker_dai_ops = {
+	.hw_params	= tas5825m_hw_params,
+	.set_fmt	= tas5825m_set_dai_fmt,
+	.mute_stream	= tas5825m_mute,
+	.no_capture_mute = 1,
+};
+
+static struct snd_soc_dai_driver tas5825m_dai[] = {
+	{
+		.name = "tas5825m-amplifier",
+		.playback = {
+			.stream_name = "Playback",
+			.channels_min = 1,
+			.channels_max = 2,
+			.rates = TAS5825M_RATES,
+			.formats = TAS5825M_FORMATS,
+		},
+		.ops = &tas5825m_speaker_dai_ops,
+	},
+};
+
+struct tas5825m_gpio_func {
+	char *name;
+	unsigned mux;
+};
+
+const struct tas5825m_gpio_func tas5825m_gpio_fuctions[] = {
+	{ "gpio",		0b0010 },
+	{ "auto-mute",		0b0011 },
+	{ "auto-mute-left",	0b0100 },
+	{ "auto-mute-right",	0b0101 },
+	{ "clock-invalid",	0b0110 },
+	{ "warn",		0b1000 },
+	{ "sdout",		0b1001 },
+	{ "fault",		0b1011 },
+	{ "spi-clk",		0b1100 },
+	{ "spi-mosi",		0b1101 }
+};
+
+static int tas5825m_get_gpio_func_by_name(const char *name) {
+	int i;
+
+	for (i = 0; i < ARRAY_SIZE(tas5825m_gpio_fuctions); i++) {
+		const struct tas5825m_gpio_func *func = &tas5825m_gpio_fuctions[i];
+
+		if (!strcmp(name, func->name)) {
+			return func->mux;
+		}
+	}
+
+	return -1;
+}
+
+static int tas5825m_gpio_init(struct tas5825m_data *tas) {
+#if IS_ENABLED(CONFIG_OF)
+	struct device *dev = &tas->i2c_client->dev;
+	int i;
+
+	for (i = 0; i <= 2; i++) {
+		char propname[32];
+		const char *funcname;
+		int err, mux;
+
+		snprintf(propname, sizeof(propname), "tas5825m,gpio%d-func", i);
+		if (!of_find_property(dev->of_node, propname, NULL)) {
+			continue;
+		}
+
+		err = of_property_read_string(dev->of_node, propname, &funcname);
+		if (err) {
+			dev_err(dev, "failed to read property %s: %d\n", propname, err);
+			return err;
+		}
+
+		mux = tas5825m_get_gpio_func_by_name(funcname);
+		if (mux < 0) {
+			dev_err(dev, "invalid mux setting %s for gpio%d\n", funcname, i);
+			return -EINVAL;
+		}
+
+		err = regmap_write(tas->regmap, TAS5825M_GPIO0_SEL + i, mux);
+		if (err < 0) {
+			dev_err(dev, "failed to write mux setting 0x%02x for gpio%d: %d\n", mux, i, err);
+			return err;
+		}
+
+		err = regmap_write_bits(tas->regmap, TAS5825M_GPIO_CTRL, BIT(i), BIT(i));
+		if (err < 0) {
+			dev_err(dev, "failed to set output enable flag for gpio%d: %d\n", i, err);
+			return err;
+		}
+	}
+#endif
+	return 0;
+};
+
+static int dsp_register_write(struct tas5825m_data *tas, u8 book, u8 page, u8 reg, u8 value) {
+	unsigned int reg_addr = ((unsigned int)book << 16) | ((unsigned int)page << 8) | reg;
+
+	if (book == 0 && page == 0) {
+		if (reg != TAS5825M_DSP_PGM_MODE &&
+		    reg != TAS5825M_DSP_CTRL &&
+		    reg != TAS5825M_ANA_CTRL &&
+		    reg != TAS5825M_DEVICE_CTRL2) {
+			return -EACCES;
+		}
+
+		/* Allow access to DIS_DSP bit only */
+		if (reg == TAS5825M_DEVICE_CTRL2) {
+			return regmap_write_bits(tas->regmap, reg_addr, TAS5825M_DIS_DSP, value);
+		}
+	}
+
+	return regmap_write(tas->regmap, reg_addr, value);
+}
+
+static ssize_t dsp_registers_store(struct device *dev, struct device_attribute *attr,
+				  const char *buf, size_t count)
+{
+	struct tas5825m_data *tas = dev_get_drvdata(dev);
+	char strbuf[32];
+	char *strptr = strbuf;
+	unsigned long book, page, reg, value;
+	int err;
+
+	if (count >= sizeof(strbuf))
+		return -EINVAL;
+
+	memcpy(strbuf, buf, count);
+	strbuf[count] = 0;
+
+	while (*strptr == ' ')
+		strptr++;
+	book = simple_strtoul(strptr, &strptr, 16);
+	while (*strptr == ' ')
+		strptr++;
+	page = simple_strtoul(strptr, &strptr, 16);
+	while (*strptr == ' ')
+		strptr++;
+	reg = simple_strtoul(strptr, &strptr, 16);
+	while (*strptr == ' ')
+		strptr++;
+	if (kstrtoul(strptr, 16, &value))
+		return -EINVAL;
+
+	err = dsp_register_write(tas, book, page, reg, value);
+	if (err < 0) {
+		return err;
+	}
+
+	return count;
+}
+
+static DEVICE_ATTR_WO(dsp_registers);
+
+static int tas5825m_probe(struct i2c_client *client)
+{
+	struct device *dev = &client->dev;
+	struct tas5825m_data *data;
+	int ret;
+	int i;
+
+	data = devm_kzalloc(dev, sizeof(*data), GFP_KERNEL);
+	if (!data)
+		return -ENOMEM;
+
+	data->i2c_client = client;
+
+	data->regmap = devm_regmap_init(dev, NULL, data, &tas5825m_regmap_config);
+	if (IS_ERR(data->regmap)) {
+		ret = PTR_ERR(data->regmap);
+		dev_err(dev, "failed to allocate register map: %d\n", ret);
+		return ret;
+	}
+
+	for (i = 0; i < ARRAY_SIZE(data->supplies); i++)
+		data->supplies[i].supply = tas5825m_supply_names[i];
+
+	ret = devm_regulator_bulk_get(dev, ARRAY_SIZE(data->supplies),
+				      data->supplies);
+	if (ret != 0) {
+		dev_err(dev, "failed to request supplies: %d\n", ret);
+		return ret;
+	}
+
+	data->shutdown_gpio = devm_gpiod_get_optional(dev, "pdn", GPIOD_OUT_LOW);
+	if (IS_ERR(data->shutdown_gpio)) {
+		ret = PTR_ERR(data->shutdown_gpio);
+		dev_err(dev, "failed to request powerdown gpio: %d\n", ret);
+		return ret;
+	}
+
+	ret = tas5825m_gpio_init(data);
+	if (ret) {
+		dev_err(dev, "failed to initialize gpios: %d\n", ret);
+		return ret;
+	}
+
+	dev_set_drvdata(dev, data);
+
+	ret = devm_snd_soc_register_component(&client->dev,
+				&soc_component_dev_tas5825m,
+				tas5825m_dai,
+				ARRAY_SIZE(tas5825m_dai));
+	if (ret < 0) {
+		dev_err(dev, "failed to register component: %d\n", ret);
+		return ret;
+	}
+
+	ret = device_create_file(&client->dev, &dev_attr_dsp_registers);
+	if (ret) {
+		dev_err(dev, "failed to create dsp register file: %d\n", ret);
+		return ret;
+	}
+
+	return 0;
+}
+
+static int tas5825m_remove(struct i2c_client *client) {
+	device_remove_file(&client->dev, &dev_attr_dsp_registers);
+
+	return 0;
+}
+
+#if IS_ENABLED(CONFIG_OF)
+static const struct of_device_id tas5825m_of_match[] = {
+	{ .compatible = "ti,tas5825m", },
+	{ },
+};
+MODULE_DEVICE_TABLE(of, tas5825m_of_match);
+#endif
+
+static struct i2c_driver tas5825m_i2c_driver = {
+	.driver = {
+		.name = "tas5825m",
+		.of_match_table = of_match_ptr(tas5825m_of_match),
+	},
+	.probe_new = tas5825m_probe,
+	.remove = tas5825m_remove,
+};
+
+module_i2c_driver(tas5825m_i2c_driver);
+
+MODULE_AUTHOR("Tobias Schramm <t.schramm@manjaro.org>");
+MODULE_DESCRIPTION("TAS5825M digital input audio amplifier driver");
+MODULE_LICENSE("GPL");
diff --git a/sound/soc/codecs/tas5825m.h b/sound/soc/codecs/tas5825m.h
new file mode 100644
index 000000000000..2a648af7d37a
--- /dev/null
+++ b/sound/soc/codecs/tas5825m.h
@@ -0,0 +1,133 @@
+// SPDX-License-Identifier: GPL-2.0+
+/*
+ * tas5825.h - ALSA SoC Texas Instruments TAS5825M digital input, smart
+ *             stereo audio amplifier
+ *
+ * Copyright (C)2021 Tobias Schramm <t.schramm@manjaro.org>
+ */
+
+#ifndef __TAS5825M_H__
+#define __TAS5825M_H__
+
+/* Register Address Map */
+#define TAS5825M_PAGE			0x00
+#define TAS5825M_RESET_CTRL		0x01
+#define TAS5825M_DEVICE_CTRL1		0x02
+#define TAS5825M_DEVICE_CTRL2		0x03
+#define TAS5825M_I2C_PAGE_AUTO_INC	0x0f
+#define TAS5825M_SIG_CH_CTRL		0x28
+#define TAS5825M_CLOCK_DET_CTRL		0x29
+#define TAS5825M_SDOUT_SEL		0x30
+#define TAS5825M_I2S_CTRL		0x31
+#define TAS5825M_SAP_CTRL1		0x33
+#define TAS5825M_SAP_CTRL2		0x34
+#define TAS5825M_SAP_CTRL3		0x35
+#define TAS5825M_FS_MON			0x37
+#define TAS5825M_BCK			0x38
+#define TAS5825M_CLKDET_STATUS		0x39
+#define TAS5825M_DSP_PGM_MODE		0x40
+#define TAS5825M_DSP_CTRL		0x46
+#define TAS5825M_DIG_VOL		0x4c
+#define TAS5825M_DIG_VOL_CTRL1		0x4e
+#define TAS5825M_DIG_VOL_CTRL2		0x4f
+#define TAS5825M_AUTO_MUTE_CTRL		0x50
+#define TAS5825M_AUTO_MUTE_TIME		0x51
+#define TAS5825M_ANA_CTRL		0x53
+#define TAS5825M_AGAIN			0x54
+#define TAS5825M_SPI_CLK		0x55
+#define TAS5825M_EEPROM_CTRL0		0x56
+#define TAS5825M_EEPROM_RD_CMD		0x57
+#define TAS5825M_EEPROM_ADDR_START0	0x58
+#define TAS5825M_EEPROM_ADDR_START1	0x59
+#define TAS5825M_EEPROM_ADDR_START2	0x5a
+#define TAS5825M_EEPROM_BOOT_STATUS	0x5b
+#define TAS5825M_BQ_WR_CTRL1		0x5c
+#define TAS5825M_PVDD_ADC		0x5e
+#define TAS5825M_GPIO_CTRL		0x60
+#define TAS5825M_GPIO0_SEL		0x61
+#define TAS5825M_GPIO1_SEL		0x62
+#define TAS5825M_GPIO2_SEL		0x63
+#define TAS5825M_GPIO_INPUT_SEL		0x64
+#define TAS5825M_GPIO_OUT		0x65
+#define TAS5825M_GPIO_OUT_INV		0x66
+#define TAS5825M_DIE_ID			0x67
+#define TAS5825M_POWER_STATE		0x68
+#define TAS5825M_AUTOMUTE_STATE		0x69
+#define TAS5825M_PHASE_CTRL		0x6a
+#define TAS5825M_SS_CTRL0		0x6b
+#define TAS5825M_SS_CTRL1		0x6c
+#define TAS5825M_SS_CTRL2		0x6d
+#define TAS5825M_SS_CTRL3		0x6e
+#define TAS5825M_SS_CTRL4		0x6f
+#define TAS5825M_CHAN_FAULT		0x70
+#define TAS5825M_GLOBAL_FAULT1		0x71
+#define TAS5825M_GLOBAL_FAULT2		0x72
+#define TAS5825M_WARNING		0x73
+#define TAS5825M_PIN_CONTROL1		0x74
+#define TAS5825M_PIN_CONTROL2		0x75
+#define TAS5825M_MISC_CONTROL		0x76
+#define TAS5825M_CBC_CONTROL		0x77
+#define TAS5825M_FAULT_CLEAR		0x78
+#define TAS5825M_BOOK			0x7f
+#define TAS5825M_MAX_REG		0xffffff
+
+
+/* TAS5825M_RESET_CTRL */
+#define TAS5825M_RST_REG		BIT(0)
+#define TAS5825M_RST_DIG_CORE		BIT(4)
+
+/* TAS5825M_DEVICE_CTRL1 */
+#define TAS5825M_DATA_FORMAT_MASK	GENMASK(5, 4)
+#define TAS5825M_DATA_FORMAT_I2S	(0x00 << 4)
+#define TAS5825M_DATA_FORMAT_TDM	(0x01 << 4)
+#define TAS5825M_DATA_FORMAT_RTJ	(0x02 << 4)
+#define TAS5825M_DATA_FORMAT_LTJ	(0x03 << 4)
+
+/* TAS5825M_DEVICE_CTRL2 */
+#define TAS5825M_DIS_DSP		BIT(4)
+#define TAS5825M_MUTE			BIT(3)
+#define TAS5825M_CTRL_STATE_MASK	GENMASK(1, 0)
+#define TAS5825M_CTRL_STATE_DEEP_SLEEP	0x00
+#define TAS5825M_CTRL_STATE_SLEEP	0x01
+#define TAS5825M_CTRL_STATE_HIZ		0x02
+#define TAS5825M_CTRL_STATE_PLAY	0x03
+
+/* TAS5825M_SIG_CH_CTRL */
+#define TAS5825M_SCLK_RATIO_CONF_MASK	GENMASK(7, 4)
+#define TAS5825M_FSMODE_MASK		GENMASK(3, 0)
+
+/* TAS5825M_SDOUT_SEL */
+#define TAS5825M_SDOUT_SEL_PREPROCESSING BIT(0)
+
+/* TAS5825M_I2S_CTRL */
+#define TAS5825M_SCLK_INV		BIT(5)
+
+/* TAS5825M_SAP_CTRL1 */
+#define TAS5825M_WORD_LENGTH_MASK	GENMASK(1, 0)
+
+/* TAS5825M_AGAIN */
+#define TAS5825M_ANA_GAIN_MASK		GENMASK(4, 0)
+
+/* TAS5825M_DIE_ID */
+#define TAS5825M_DIE_ID_ID		0b10010101
+
+/* TAS5825M_CHAN_FAULT */
+#define TAS5825_CH2_OC_I		BIT(0)
+#define TAS5825_CH1_OC_I		BIT(1)
+#define TAS5825_CH2_DC_1		BIT(2)
+#define TAS5825_CH1_DC_1		BIT(3)
+
+/* TAS5825M_GLOBAL_FAULT1 */
+#define TAS5825M_PVDD_UV_I		BIT(0)
+#define TAS5825M_PVDD_OV_I		BIT(1)
+#define TAS5825M_CLK_FAULT_I		BIT(2)
+
+/* TAS5825M_GLOBAL_FAULT2 */
+#define TAS5825M_OTSD_I			BIT(0)
+#define TAS5825M_CBC_FAULT_CH1_I	BIT(1)
+#define TAS5825M_CBC_FAULT_CH2_I	BIT(2)
+
+/* TAS5825M_FAULT_CLEAR */
+#define TAS5825M_ANALOG_FAULT_CLEAR	BIT(7)
+
+#endif /* __TAS5825M_H__ */
-- 
2.30.1

